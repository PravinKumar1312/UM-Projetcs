1. HTML uses "markup" to annotate text, images, and other content for display in a Web browser. 

2. HTML markup includes special "elements" such as <head>, <title>, <body>, <header>, <footer>, 
 <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, 
 <details>, <embed>, <nav>, <search>, <output>, <progress>, <video>, <ul>, <ol>, <li> and many others.

/*
<!doctype html>: The doctype is a required preamble. In the mists of time, when HTML was young (around 1991/92), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. However, these days, they don't do much and are basically just needed to make sure your document behaves correctly. That's all you need to know for now.
<html></html>: The <html> element wraps all the content on the entire page and is sometimes known as the root element. It also includes the lang attribute, which sets the primary language of the document.
<head></head>: The <head> element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style the content, character set declarations, and more.
<meta charset="utf-8">: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of written languages. Essentially, it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.
<meta name="viewport" content="width=device-width">: This viewport element ensures the page renders at the width of the browser viewport, preventing mobile browsers from rendering pages wider than the viewport and then shrinking them down.
<title></title>: The <title> element sets the title of your page, which is the title that appears in the browser tab the page is loaded in. It is also used to describe the page when you bookmark/favorite it.
<body></body>: The <body> element contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else. At the moment it only contains a single <img> element, but we'll add more content later on.
*/

/*
Embedding images
Let's turn our attention to the <img> element:

html
Copy to Clipboard
<img src="" alt="My test image" />
This embeds an image into our page in the position it appears. It does this via the src (source) attribute, which contains the path to the image file we want to embed.

We have also included an alt (alternative) attribute. In the alt attribute, you specify descriptive text for users who cannot see the image, possibly because of the following reasons:

They are visually impaired. Users with significant visual impairments often use tools called screen readers to read out the alt text to them.

Something has gone wrong, causing the image not to display. If the src attribute does not contain a valid path to an image, the alt text will be displayed instead:

The words: my test image

The alt text you write should provide the reader with enough information to have a good idea of what the image conveys. In this example, our current text of "My test image" is not good because it doesn't convey descriptive information about the image. A much better alternative for our Firefox logo would be "The Firefox logo: a flaming fox surrounding the Earth."
*/

/*
Let's get your image displaying now.

Inside the first-website folder, create a new folder called images, and put the image you chose in the previous example inside this folder.
Inside the <img> tag's src attribute value, enter the path to your image. It is inside a folder called images, which is inside the same directory as your index.html file, therefore the path will be images/ plus the name of your image. For example, if your image was called firefox-icon.png, your src attribute would look like this: src="images/firefox-icon.png".
Replace the alt attribute value — My test image — with some text that better describes your image.
Open your index.html file inside a web browser. You should see your image displayed. If not, check your <img> element against our code; make sure it is not missing any of the syntax, such as the quote marks. Make sure the image filename is correct.
If the image is really large and therefore doesn't fit on the screen, don't worry about it. We'll fix this issue in the next article.
*/

/*
Marking up text
This section will cover some essential HTML elements you'll use for marking up text.
Headings
Heading elements allow you to specify that certain parts of your content are headings — or subheadings. In the same way that a book has the main title, chapter titles, and subtitles, an HTML document can too. HTML contains 6 heading levels, <h1>–<h6>, although you'll commonly only use 3 to 4 at most:

html
Copy to Clipboard
<!-- 4 heading levels: -->
<h1>My main title</h1>
<h2>My top level heading</h2>
<h3>My subheading</h3>
<h4>My sub-subheading</h4>
Note: Anything in HTML between <!-- and --> is an HTML comment. The browser ignores comments as it renders the code. In other words, they are not visible on the page — just in the code. HTML comments are a way for you to add notes about your code or logic, which might be useful to others working on the same code, or you, if you came back to it after 6 months and can't remember what you did.

Now try adding a suitable main title to your HTML page just above your <img> element. Save the file and view it in a browser to see the effect.

Paragraphs
Paragraph <p> elements are for containing paragraphs of text; you'll use these frequently when marking up regular text content:

html
Copy to Clipboard
<p>This is a single paragraph</p>
Add your sample text from the previous article into one or a few paragraphs, placed directly below your <img> element. Save it and look at your page in a browser.

Lists
A lot of the web's content is lists and HTML has special elements for these. Marking up lists always consists of at least 2 elements. The most common list types are ordered and unordered lists:

Unordered lists are for lists where the order of the items doesn't matter, such as a shopping list. These are wrapped in a <ul> element.
Ordered lists are for lists where the order of the items does matter, such as a list of cooking instructions in a recipe. These are wrapped in an <ol> element.
Each item inside the lists is put inside an <li> (list item) element.

For example, if we wanted to turn part of the following paragraph fragment into a list:

html
Copy to Clipboard
<p>
  At Mozilla, we're a global community of technologists, thinkers, and builders
  working together…
</p>
We could modify the markup to this:

html
Copy to Clipboard
<p>At Mozilla, we're a global community of</p>

<ul>
  <li>technologists</li>
  <li>thinkers</li>
  <li>builders</li>
</ul>

<p>working together…</p>
Try adding an ordered or unordered list to your example page, and view the result in a browser.

Creating links
Links are very important — they are what makes the web a web! To add a link, we need to use an <a> element, "a" being short for "anchor". To make text within your paragraph into a link, follow these steps:

Choose some text. We chose the text "Mozilla Manifesto".

Wrap the text in an <a> element, as shown below:

html
Copy to Clipboard
<a>Mozilla Manifesto</a>
Give the <a> element an href attribute, as shown below:

html
Copy to Clipboard
<a href="">Mozilla Manifesto</a>
Fill in the value of this attribute with the web address that you want the link to point to:

html
Copy to Clipboard
<a href="https://www.mozilla.org/en-US/about/manifesto/">
  Mozilla Manifesto
</a>
You might get unexpected results if you omit the https:// or http:// part, called the protocol, at the beginning of the web address. After making a link, click it to make sure it is sending you where you wanted it to.

Note: href might appear like a rather obscure choice for an attribute name at first. It stands for hypertext reference.

Add a link to your page now, if you haven't already done so.
*/


/*
<form>: The Form element
Baseline Widely available *
The <form> HTML element represents a document section containing interactive controls for submitting information.

Try it
HTML Demo: <form>
Reset
HTML
CSS
1
2
3
4
5
6
7
8
9
10
11
12
13
14
<form action="" method="get" class="form-example">
  <div class="form-example">
    <label for="name">Enter your name: </label>
    <input type="text" name="name" id="name" required />
  </div>
  <div class="form-example">
    <label for="email">Enter your email: </label>
    <input type="email" name="email" id="email" required />
  </div>
  <div class="form-example">
    <input type="submit" value="Subscribe!" />
  </div>
</form>

Output
It is possible to use the :valid and :invalid CSS pseudo-classes to style a <form> element based on whether the elements inside the form are valid.

Attributes
This element includes the global attributes.

accept Deprecated
Comma-separated content types the server accepts.

Note: This attribute has been deprecated and should not be used. Instead, use the accept attribute on <input type=file> elements.

accept-charset
The character encoding accepted by the server. The specification allows a single case-insensitive value of "UTF-8", reflecting the ubiquity of this encoding (historically multiple character encodings could be specified as a comma-separated or space-separated list).

autocapitalize
Controls whether inputted text is automatically capitalized and, if so, in what manner. See the autocapitalize global attribute page for more information.

autocomplete
Indicates whether input elements can by default have their values automatically completed by the browser. autocomplete attributes on form elements override it on <form>. Possible values:

off: The browser may not automatically complete entries. (Browsers tend to ignore this for suspected login forms; see Managing autofill for login fields.)
on: The browser may automatically complete entries.
name
The name of the form. The value must not be the empty string, and must be unique among the form elements in the forms collection that it is in, if any.

rel
Controls the annotations and what kinds of links the form creates. Annotations include external, nofollow, opener, noopener, and noreferrer. Link types include help, prev, next, search, and license. The rel value is a space-separated list of these enumerated values.

Attributes for form submission
The following attributes control behavior during form submission.

action
The URL that processes the form submission. This value can be overridden by a formaction attribute on a <button>, <input type="submit">, or <input type="image"> element. This attribute is ignored when method="dialog" is set.

enctype
If the value of the method attribute is post, enctype is the MIME type of the form submission. Possible values:

application/x-www-form-urlencoded: The default value.
multipart/form-data: Use this if the form contains <input> elements with type=file.
text/plain: Useful for debugging purposes.
This value can be overridden by formenctype attributes on <button>, <input type="submit">, or <input type="image"> elements.

method
The HTTP method to submit the form with. The only allowed methods/values are (case insensitive):

post: The POST method; form data sent as the request body.
get (default): The GET; form data appended to the action URL with a ? separator. Use this method when the form has no side effects.
dialog: When the form is inside a <dialog>, closes the dialog and causes a submit event to be fired on submission, without submitting data or clearing the form.
This value is overridden by formmethod attributes on <button>, <input type="submit">, or <input type="image"> elements.

novalidate
This Boolean attribute indicates that the form shouldn't be validated when submitted. If this attribute is not set (and therefore the form is validated), it can be overridden by a formnovalidate attribute on a <button>, <input type="submit">, or <input type="image"> element belonging to the form.

target
Indicates where to display the response after submitting the form. It is a name/keyword for a browsing context (for example, tab, window, or iframe). The following keywords have special meanings:

_self (default): Load into the same browsing context as the current one.
_blank: Load into a new unnamed browsing context. This provides the same behavior as setting rel="noopener" which does not set window.opener.
_parent: Load into the parent browsing context of the current one. If no parent, behaves the same as _self.
_top: Load into the top-level browsing context (i.e., the browsing context that is an ancestor of the current one and has no parent). If no parent, behaves the same as _self.
_unfencedTop: Load the response from a form inside an embedded fenced frame into the top-level frame (i.e., traversing beyond the root of the fenced frame, unlike other reserved destinations). Only available inside fenced frames.
This value can be overridden by a formtarget attribute on a <button>, <input type="submit">, or <input type="image"> element.

Examples
html
Copy to Clipboard
play
<!-- Form which will send a GET request to the current URL -->
<form method="get">
  <label>
    Name:
    <input name="submitted-name" autocomplete="name" />
  </label>
  <button>Save</button>
</form>

<!-- Form which will send a POST request to the current URL -->
<form method="post">
  <label>
    Name:
    <input name="submitted-name" autocomplete="name" />
  </label>
  <button>Save</button>
</form>

<!-- Form with fieldset, legend, and label -->
<form method="post">
  <fieldset>
    <legend>Do you agree to the terms?</legend>
    <label><input type="radio" name="radio" value="yes" /> Yes</label>
    <label><input type="radio" name="radio" value="no" /> No</label>
  </fieldset>
</form>
Result
play

Technical summary
Content categories	Flow content, palpable content
Permitted content	Flow content, but not containing <form> elements
Tag omission	None, both the starting and ending tag are mandatory.
Permitted parents	Any element that accepts flow content
Implicit ARIA role	form
Permitted ARIA roles	search, none or presentation
DOM interface	HTMLFormElement
Tip: you can click/tap on a cell for more information.

Full support
Full support
No support
No support
See implementation notes.
See also
HTML forms guide
Other elements that are used when creating forms: <button>, <datalist>, <fieldset>, <input>, <label>, <legend>, <meter>, <optgroup>, <option>, <output>, <progress>, <select>, <textarea>.
Getting a list of the elements in the form: HTMLFormElement.elements
 */




 /*
CSS: Cascading Style Sheets
Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.

CSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now just "CSS" with individual CSS modules having version numbers.

After CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.

Beginner's tutorials
Your first website: Styling the content
This article provides a brief tour of what CSS is and how to use it, aimed at people who are completely new to web development.

CSS styling basics
Our Learn web development section's CSS basics module teaches CSS fundamentals from the ground up.

CSS text styling
Here we look at fundamentals including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.

CSS layout
Now it's time to look at how to correctly lay out your boxes in relation to one another, and the browser viewport. This module looks at floats, positioning, other modern layout tools, and building responsive designs that will adapt to different devices, screen sizes, and resolutions.

Reference
The CSS reference is an exhaustive reference for seasoned Web developers, describing every property and concept of CSS, including:

The syntax and forms of the language
Specificity, inheritance, and the cascade
CSS selectors, including pseudo-elements, nesting, scoping and shadow parts
CSS at-rules, including media and container queries
CSS values and units module, including numeric data types, textual data types and functional notations
Box model and margin collapse
The containing block
Stacking and block-formatting contexts
Initial, computed, used, and actual values
CSS shorthand properties
CSS flexible box, multi-column and grid layout
Animation, transitions, and transforms
Cookbook
The CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. In addition to providing code you can use as a starting point in your projects, these recipes highlight the different ways layout specifications can be used and the choices you can make as a developer.

Tools for CSS development
You can use the W3C CSS Validation Service to check if your CSS is valid. This is an invaluable debugging tool.
Firefox Developer Tools lets you view and edit a page's live CSS via the Inspector and Style Editor tools.
The Web Developer extension for Firefox lets you track and edit live CSS on watched sites.
*/